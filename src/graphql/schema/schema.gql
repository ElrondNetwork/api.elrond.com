# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

"""Account object type."""
type Account {
  """Bech32 address for the given account."""
  address: String!

  """Account assets list for the given account."""
  assets: AccountAssets

  """Current balance for the given account."""
  balance: String!

  """Current nonce for the given account."""
  nonce: Float!

  """Shard identifier for the given account."""
  shard: Float!
}

"""Account assets object type."""
type AccountAssets {
  """Description for the given account asset."""
  description: String!

  """Icon for the given account asset."""
  icon: String

  """Icon PNG link for the given account asset."""
  iconPng: String

  """Icon SVG link for the given account asset."""
  iconSvg: String

  """Name for the given account asset."""
  name: String!

  """Proof for the given account asset."""
  proof: String

  """Tags list for the given account asset."""
  tags: [String!]!
}

"""Detailed Account object type that extends Account."""
type AccountDetailed {
  """Bech32 address for the given account."""
  address: String!

  """Account assets list for the given account."""
  assets: AccountAssets

  """Current balance for the given account."""
  balance: String!

  """Source code in HEX format for the given detailed account."""
  code: String!

  """Hash of the source code for the given detailed account."""
  codeHash: String

  """Deployment timestamp for the given detailed account."""
  deployedAt: Float

  """Developer reward for the given detailed account."""
  developerReward: String!

  """If the given detailed account is payable."""
  isPayable: Boolean

  """If the given detailed account is payable by smart contract."""
  isPayableBySmartContract: Boolean

  """If the given detailed account is readable."""
  isReadable: Boolean

  """If the given detailed account is upgradeable."""
  isUpgradeable: Boolean

  """Current nonce for the given account."""
  nonce: Float!

  """Bech32 address of the owner account for the given detailed account."""
  ownerAddress: String!

  """Hash of the root node for the given detailed account."""
  rootHash: String

  """Scam information for the given detailed account."""
  scamInfo: ScamInformation

  """Smart contracts count for the given detailed account."""
  scrCount: Float!

  """Shard identifier for the given account."""
  shard: Float!

  """Transactions count for the given detailed account."""
  txCount: Float!

  """Username for the given detailed account."""
  username: String!
}

"""Input to retrieve the given detailed account for."""
input GetAccountDetailedInput {
  """Address to retrieve the corresponding detailed account for."""
  address: String = ""
}

"""Input to retrieve the given accounts for."""
input GetAccountsInput {
  """Number of accounts to skip for the given result set."""
  from: Float = 0

  """Number of accounts to retrieve for the given result set."""
  size: Float = 25
}

"""Input to retrieve the given detailed transaction for."""
input GetTransactionDetailedInput {
  """Hash to retrieve the corresponding detailed transaction for."""
  hash: String = ""
}

"""Input to retrieve the given transactions count for."""
input GetTransactionsCountInput {
  """After timestamp for the given result set."""
  after: Float

  """Before timestamp for the given result set."""
  before: Float

  """Condition for ElasticSearch queries for the given result set."""
  condition: String

  """Filter transactions by function name for the given result set."""
  function: String

  """
  Filter by a comma-separated list of transaction hashes for the given result set.
  """
  hashes: [String!]

  """Mini block hash for the given result set."""
  miniBlockHash: String

  """Address of the transaction receiver for the given result set."""
  receiver: String

  """Receiver shard identfier for the given result set."""
  receiverShard: Float

  """Search in data object for the given result set."""
  search: String

  """Address of the transaction sender for the given result set."""
  sender: String

  """Sender shard identfier for the given result set."""
  senderShard: Float

  """
  Status of the transaction (success / pending / invalid / fail) for the given result set.
  """
  status: TransactionStatus

  """Token identfier for the given result set."""
  token: String
}

"""Input to retrieve the given transactions for."""
input GetTransactionsInput {
  """After timestamp for the given result set."""
  after: Float

  """Before timestamp for the given result set."""
  before: Float

  """Sort order (ascending / descending) for the given result set."""
  condition: SortOrder

  """Number of transactions to skip for the given result set."""
  from: Float = 0

  """Filter transactions by function name for the given result set."""
  function: String

  """
  Filter by a comma-separated list of transaction hashes for the given result set.
  """
  hashes: [String!]

  """Mini block hash for the given result set."""
  miniBlockHash: String

  """Address of the transaction receiver for the given result set."""
  receiver: String

  """Receiver shard identfier for the given result set."""
  receiverShard: Float

  """Search in data object for the given result set."""
  search: String

  """Address of the transaction sender for the given result set."""
  sender: String

  """Sender shard identfier for the given result set."""
  senderShard: Float

  """Number of transactions to retrieve for the given result set."""
  size: Float = 25

  """
  Status of the transaction (success / pending / invalid / fail) for the given result set.
  """
  status: TransactionStatus

  """Token identfier for the given result set."""
  token: String

  """If to return logs for the given result set."""
  withLogs: Boolean

  """If to return operations for the given result set."""
  withOperations: Boolean

  """If to return smart contract results for the given result set."""
  withScResults: Boolean
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type Query {
  """Retrieve the detailed account for the given input."""
  account(
    """Input to retrieve the given detailed account for."""
    input: GetAccountDetailedInput!
  ): AccountDetailed

  """Retrieve all accounts for the given input."""
  accounts(
    """Input to retrieve the given accounts for."""
    input: GetAccountsInput!
  ): [Account!]!

  """Retrieve all accounts count."""
  accountsCount: Float!

  """Retrieve the detailed transaction for the given input."""
  transaction(
    """Input to retrieve the given detailed transaction for."""
    input: GetTransactionDetailedInput!
  ): TransactionDetailed

  """Retrieve all transactions available for the given input."""
  transactions(
    """Input to retrieve the given transactions for."""
    input: GetTransactionsInput!
  ): [TransactionDetailed!]!

  """Retrieve all transactions count for the given input."""
  transactionsCount(
    """Input to retrieve the given transactions count for."""
    input: GetTransactionsCountInput!
  ): Float!
}

"""Scam information object type."""
type ScamInformation {
  """Information for the given scam."""
  info: String

  """Type for the given scam information."""
  type: ScamType!
}

"""Scam type object type."""
enum ScamType {
  """No scam type."""
  none

  """Potential scam type."""
  potentialScam

  """Scam type."""
  scam
}

"""Smart contract result object type."""
type SmartContractResult {
  """Transaction action for the given smart contract result."""
  action: TransactionAction

  """Call type for the given smart contract result."""
  callType: String!

  """Data for the given smart contract result."""
  data: String!

  """Gas limit for the given smart contract result."""
  gasLimit: Float!

  """Gas price for the given smart contract result."""
  gasPrice: Float!

  """Hash for the given smart contract result."""
  hash: String

  """Transaction logs for the given smart contract result."""
  logs: TransactionLog

  """Mini block hash for the given smart contract result."""
  miniBlockHash: String

  """Nonce for the given smart contract result."""
  nonce: Float!

  """Original transaction hash for the given smart contract result."""
  originalTxHash: String!

  """Previous transaction hash for the given smart contract result."""
  prevTxHash: String!

  """Receiver address for the given smart contract result."""
  receiver: String!

  """Relayed value for the given smart contract result."""
  relayedValue: String!

  """Return message for the given smart contract result."""
  returnMessage: String

  """Sender address for the given smart contract result."""
  sender: String!

  """Timestamp for the given smart contract result."""
  timestamp: Float!

  """Value for the given smart contract result."""
  value: String!
}

"""Sort order object type."""
enum SortOrder {
  """Ascending order."""
  asc

  """Descending order."""
  desc
}

"""Token type object type."""
enum TokenType {
  """Fungible ESDT token type."""
  FungibleESDT

  """Meta ESDT token type."""
  MetaESDT

  """Non-fungible ESDT token type."""
  NonFungibleESDT

  """Semi-fungible ESDT token type."""
  SemiFungibleESDT
}

"""Transaction action object type."""
type TransactionAction {
  """Description for the given transaction action."""
  arguments: JSON

  """Category for the given transaction action."""
  category: String!

  """Description for the given transaction action."""
  description: String!

  """Name for the given transaction action."""
  name: String!
}

"""Detailed Transaction object type that extends Transaction."""
type TransactionDetailed {
  """Transaction action for the given transaction."""
  action: TransactionAction

  """Data for the given transaction."""
  data: String

  """Fee for the given transaction."""
  fee: String

  """Function for the given transaction."""
  function: String

  """Gas limit for the given transaction."""
  gasLimit: Float

  """Gas price for the given transaction."""
  gasPrice: Float

  """Gas used for the given transaction."""
  gasUsed: Float

  """Transaction log for the given detailed transaction."""
  logs: TransactionLog

  """Mini block hash for the given transaction."""
  miniBlockHash: String

  """Nonce for the given transaction."""
  nonce: Float

  """Transaction operations for the given detailed transaction."""
  operations: [TransactionOperation!]

  """Pending results for the given transaction."""
  pendingResults: Boolean

  """Price for the given detailed transaction."""
  price: Float

  """Transaction receipt for the given detailed transaction."""
  receipt: TransactionReceipt

  """Receiver address for the given transaction."""
  receiver: String!

  """Receiver shard for the given transaction."""
  receiverShard: Float!

  """Smart contract results for the given detailed transaction."""
  results: [SmartContractResult!]

  """Round for the given transaction."""
  round: Float

  """Scam information for the given transaction."""
  scamInfo: ScamInformation

  """Sender address for the given transaction."""
  sender: String!

  """Sender shard identifier for the given transaction."""
  senderShard: Float!

  """Signature for the given transaction."""
  signature: String

  """Status for the given transaction."""
  status: String!

  """Timestamp for the given transaction."""
  timestamp: Float!

  """Hash for the given transaction."""
  txHash: String!

  """Value for the given transaction."""
  value: String!
}

"""Transaction log object type."""
type TransactionLog {
  """Address for the given transaction log."""
  address: String!

  """Transaction log events list for the given transaction log."""
  events: [TransactionLogEvent!]!

  """Identifier for the given transaction log."""
  id: String!
}

"""Transaction log event object type."""
type TransactionLogEvent {
  """Address for the given transaction log event."""
  address: String!

  """Data for the given transaction log event."""
  data: String

  """Identifier for the given transaction log event."""
  identifier: String!

  """Topics list for the given transaction log event."""
  topics: [String!]!
}

"""Transaction operation object type."""
type TransactionOperation {
  """Transaction operation action for the transaction operation."""
  action: TransactionOperationAction!

  """Collection for the transaction operation."""
  collection: String!

  """Data for the transaction operation."""
  data: String

  """Decimals for the transaction operation."""
  decimals: Float

  """ESDT type for the transaction operation."""
  esdtType: TokenType

  """Identifier for the transaction operation."""
  id: String!

  """Identifier for the transaction operation."""
  identifier: String!

  """Message for the transaction operation."""
  message: String

  """Name for the transaction operation."""
  name: String

  """Receiver address for the transaction operation."""
  receiver: String!

  """Sender address for the transaction operation."""
  sender: String!

  """SVG URL for the transaction operation."""
  svgUrl: String

  """Transaction operation type for the transaction operation."""
  type: TransactionOperationType!

  """Value for the transaction operation."""
  value: String
}

"""Transaction operation action object type."""
enum TransactionOperationAction {
  """Add quantity operation action."""
  addQuantity

  """Burn operation action."""
  burn

  """Create operation action."""
  create

  """Freeze operation action."""
  freeze

  """Local burn operation action."""
  localBurn

  """Local mint operation action."""
  localMint

  """No operation operation action."""
  none

  """Signal error operation action."""
  signalError

  """Transafer operation action."""
  transfer

  """Transfer only value operation action."""
  transferValueOnly

  """Wipe operation action."""
  wipe

  """Write log operation action."""
  writeLog
}

"""Transaction operation type object type."""
enum TransactionOperationType {
  """EGLD operation type."""
  egld

  """Error operation type."""
  error

  """ESDT operation type."""
  esdt

  """Log operation type."""
  log

  """NFT operation type."""
  nft

  """No operation type."""
  none
}

"""Transaction receipt object type."""
type TransactionReceipt {
  """Data for the given transaction receipt."""
  data: String!

  """Sender address for the given transaction receipt."""
  sender: String!

  """Value for the given transaction receipt."""
  value: String!
}

"""Transaction status object type."""
enum TransactionStatus {
  """Fail status."""
  fail

  """Invalid status."""
  invalid

  """Pending status."""
  pending

  """Success status."""
  success
}